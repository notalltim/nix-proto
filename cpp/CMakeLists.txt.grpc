cmake_minimum_required(VERSION 3.12)

project(${CPP_NAME} VERSION "${CPP_VERISON}")

find_package(Protobuf REQUIRED)
find_package(gRPC REQUIRED)

include(util.cmake)

set_depenencies("${CPP_DEPS}")

set(PROTO_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated/")
file(MAKE_DIRECTORY ${PROTO_BINARY_DIR})

include(GNUInstallDirs)

set(OBJECT_LIBRARY "${PROJECT_NAME}_object")

add_library(${OBJECT_LIBRARY} OBJECT ${PROTOS})

target_include_directories(${OBJECT_LIBRARY}
                           PUBLIC $<BUILD_INTERFACE:${PROTO_BINARY_DIR}>)

target_link_libraries(${OBJECT_LIBRARY} PUBLIC gRPC::grpc gRPC::grpc++
                                               protobuf::libprotobuf)

protobuf_generate(
  TARGET ${OBJECT_LIBRARY}
  LANGUAGE grpc
  GENERATE_EXTENSIONS
  .grpc.pb.h
  .grpc.pb.cc
  PLUGIN "protoc-gen-grpc=\$<TARGET_FILE:gRPC::grpc_cpp_plugin>"
  PROTOC_OUT_DIR "${PROTO_BINARY_DIR}"
  IMPORT_DIRS ${PROTO_DEPS}
)

set(LIBRARY ${PROJECT_NAME})

add_library(${LIBRARY} $<TARGET_OBJECTS:${OBJECT_LIBRARY}>)

target_include_directories(
  ${LIBRARY} PUBLIC $<BUILD_INTERFACE:${PROTO_BINARY_DIR}>
                           $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

target_link_libraries(
  ${LIBRARY} PUBLIC ${DEPS} gRPC::grpc gRPC::grpc++
                           protobuf::libprotobuf)

install(
  DIRECTORY ${PROTO_BINARY_DIR}
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING
  PATTERN "*grpc.pb.h")

set(TARGET_FILE ${PROJECT_NAME}Targets)

install(
  TARGETS ${LIBRARY}
  EXPORT ${TARGET_FILE}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_ARCHIVEDIR})

install(
  EXPORT ${TARGET_FILE}
  FILE ${TARGET_FILE}.cmake
  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  NAMESPACE ${PROJECT_NAME}::)

include(CMakePackageConfigHelpers)

set(CONFIG_FILE ${PROJECT_NAME}Config.cmake)

configure_package_config_file(
  ${CONFIG_FILE}.in ${CONFIG_FILE}
  INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")

set(CONFIG_VERSION_FILE ${PROJECT_NAME}ConfigVersion.cmake)

write_basic_package_version_file(
  ${CONFIG_VERSION_FILE}
  VERSION ${CPP_VERSION}
  COMPATIBILITY SameMajorVersion)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE}"
              "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_VERSION_FILE}"
        DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
